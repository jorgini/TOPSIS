// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks-repository/mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	entity "webApp/entity"
	eval "webApp/lib/eval"
	matrix "webApp/lib/matrix"
	repository "webApp/repository"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method.
func (m *MockUser) CreateNewUser(ctx context.Context, user *entity.UserModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockUserMockRecorder) CreateNewUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUser)(nil).CreateNewUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUser) DeleteUser(ctx context.Context, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserMockRecorder) DeleteUser(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUser)(nil).DeleteUser), ctx, uid)
}

// GetUID mocks base method.
func (m *MockUser) GetUID(ctx context.Context, user *entity.UserModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUID", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUID indicates an expected call of GetUID.
func (mr *MockUserMockRecorder) GetUID(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockUser)(nil).GetUID), ctx, user)
}

// GetUserByUID mocks base method.
func (m *MockUser) GetUserByUID(ctx context.Context, uid int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUID", ctx, uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUID indicates an expected call of GetUserByUID.
func (mr *MockUserMockRecorder) GetUserByUID(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUID", reflect.TypeOf((*MockUser)(nil).GetUserByUID), ctx, uid)
}

// UpdateUser mocks base method.
func (m *MockUser) UpdateUser(ctx context.Context, uid int64, update *entity.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, uid, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserMockRecorder) UpdateUser(ctx, uid, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUser)(nil).UpdateUser), ctx, uid, update)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// GetUIDByToken mocks base method.
func (m *MockSession) GetUIDByToken(ctx context.Context, refresh string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUIDByToken", ctx, refresh)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUIDByToken indicates an expected call of GetUIDByToken.
func (mr *MockSessionMockRecorder) GetUIDByToken(ctx, refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUIDByToken", reflect.TypeOf((*MockSession)(nil).GetUIDByToken), ctx, refresh)
}

// InsertRefreshToken mocks base method.
func (m *MockSession) InsertRefreshToken(ctx context.Context, refresh entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRefreshToken", ctx, refresh)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRefreshToken indicates an expected call of InsertRefreshToken.
func (mr *MockSessionMockRecorder) InsertRefreshToken(ctx, refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRefreshToken", reflect.TypeOf((*MockSession)(nil).InsertRefreshToken), ctx, refresh)
}

// UpdateRefreshToken mocks base method.
func (m *MockSession) UpdateRefreshToken(ctx context.Context, refresh entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", ctx, refresh)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockSessionMockRecorder) UpdateRefreshToken(ctx, refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockSession)(nil).UpdateRefreshToken), ctx, refresh)
}

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// ConnectToTask mocks base method.
func (m *MockTask) ConnectToTask(ctx context.Context, sid int64, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToTask", ctx, sid, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToTask indicates an expected call of ConnectToTask.
func (mr *MockTaskMockRecorder) ConnectToTask(ctx, sid, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToTask", reflect.TypeOf((*MockTask)(nil).ConnectToTask), ctx, sid, password)
}

// CreateNewTask mocks base method.
func (m *MockTask) CreateNewTask(ctx context.Context, task *entity.TaskModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTask", ctx, task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewTask indicates an expected call of CreateNewTask.
func (mr *MockTaskMockRecorder) CreateNewTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTask", reflect.TypeOf((*MockTask)(nil).CreateNewTask), ctx, task)
}

// DeleteTask mocks base method.
func (m *MockTask) DeleteTask(ctx context.Context, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskMockRecorder) DeleteTask(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTask)(nil).DeleteTask), ctx, sid)
}

// GetAllSolutions mocks base method.
func (m *MockTask) GetAllSolutions(ctx context.Context, uid int64) ([]entity.TaskModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSolutions", ctx, uid)
	ret0, _ := ret[0].([]entity.TaskModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSolutions indicates an expected call of GetAllSolutions.
func (mr *MockTaskMockRecorder) GetAllSolutions(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSolutions", reflect.TypeOf((*MockTask)(nil).GetAllSolutions), ctx, uid)
}

// GetAlts mocks base method.
func (m *MockTask) GetAlts(ctx context.Context, sid int64) (entity.Alts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlts", ctx, sid)
	ret0, _ := ret[0].(entity.Alts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlts indicates an expected call of GetAlts.
func (mr *MockTaskMockRecorder) GetAlts(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlts", reflect.TypeOf((*MockTask)(nil).GetAlts), ctx, sid)
}

// GetCriteria mocks base method.
func (m *MockTask) GetCriteria(ctx context.Context, sid int64) (entity.Criteria, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCriteria", ctx, sid)
	ret0, _ := ret[0].(entity.Criteria)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCriteria indicates an expected call of GetCriteria.
func (mr *MockTaskMockRecorder) GetCriteria(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCriteria", reflect.TypeOf((*MockTask)(nil).GetCriteria), ctx, sid)
}

// GetTask mocks base method.
func (m *MockTask) GetTask(ctx context.Context, sid int64) (*entity.TaskModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, sid)
	ret0, _ := ret[0].(*entity.TaskModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskMockRecorder) GetTask(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTask)(nil).GetTask), ctx, sid)
}

// SetAlts mocks base method.
func (m *MockTask) SetAlts(ctx context.Context, sid int64, alts entity.Alts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAlts", ctx, sid, alts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAlts indicates an expected call of SetAlts.
func (mr *MockTaskMockRecorder) SetAlts(ctx, sid, alts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlts", reflect.TypeOf((*MockTask)(nil).SetAlts), ctx, sid, alts)
}

// SetCriteria mocks base method.
func (m *MockTask) SetCriteria(ctx context.Context, sid int64, alts entity.Criteria) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCriteria", ctx, sid, alts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCriteria indicates an expected call of SetCriteria.
func (mr *MockTaskMockRecorder) SetCriteria(ctx, sid, alts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCriteria", reflect.TypeOf((*MockTask)(nil).SetCriteria), ctx, sid, alts)
}

// SetExpertsWeights mocks base method.
func (m *MockTask) SetExpertsWeights(ctx context.Context, sid int64, weights entity.Weights) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpertsWeights", ctx, sid, weights)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpertsWeights indicates an expected call of SetExpertsWeights.
func (mr *MockTaskMockRecorder) SetExpertsWeights(ctx, sid, weights any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpertsWeights", reflect.TypeOf((*MockTask)(nil).SetExpertsWeights), ctx, sid, weights)
}

// SetLastChange mocks base method.
func (m *MockTask) SetLastChange(ctx context.Context, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastChange", ctx, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastChange indicates an expected call of SetLastChange.
func (mr *MockTaskMockRecorder) SetLastChange(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastChange", reflect.TypeOf((*MockTask)(nil).SetLastChange), ctx, sid)
}

// SetPassword mocks base method.
func (m *MockTask) SetPassword(ctx context.Context, sid int64, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", ctx, sid, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockTaskMockRecorder) SetPassword(ctx, sid, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockTask)(nil).SetPassword), ctx, sid, password)
}

// UpdateAlts mocks base method.
func (m *MockTask) UpdateAlts(ctx context.Context, sid int64, alts entity.Alts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlts", ctx, sid, alts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlts indicates an expected call of UpdateAlts.
func (mr *MockTaskMockRecorder) UpdateAlts(ctx, sid, alts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlts", reflect.TypeOf((*MockTask)(nil).UpdateAlts), ctx, sid, alts)
}

// UpdateCriteria mocks base method.
func (m *MockTask) UpdateCriteria(ctx context.Context, sid int64, criteria entity.Criteria) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCriteria", ctx, sid, criteria)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCriteria indicates an expected call of UpdateCriteria.
func (mr *MockTaskMockRecorder) UpdateCriteria(ctx, sid, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCriteria", reflect.TypeOf((*MockTask)(nil).UpdateCriteria), ctx, sid, criteria)
}

// UpdateTask mocks base method.
func (m *MockTask) UpdateTask(ctx context.Context, sid int64, input *entity.TaskModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, sid, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskMockRecorder) UpdateTask(ctx, sid, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTask)(nil).UpdateTask), ctx, sid, input)
}

// ValidateUser mocks base method.
func (m *MockTask) ValidateUser(ctx context.Context, uid, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", ctx, uid, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockTaskMockRecorder) ValidateUser(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockTask)(nil).ValidateUser), ctx, uid, sid)
}

// MockMatrix is a mock of Matrix interface.
type MockMatrix struct {
	ctrl     *gomock.Controller
	recorder *MockMatrixMockRecorder
}

// MockMatrixMockRecorder is the mock recorder for MockMatrix.
type MockMatrixMockRecorder struct {
	mock *MockMatrix
}

// NewMockMatrix creates a new mock instance.
func NewMockMatrix(ctrl *gomock.Controller) *MockMatrix {
	mock := &MockMatrix{ctrl: ctrl}
	mock.recorder = &MockMatrixMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatrix) EXPECT() *MockMatrixMockRecorder {
	return m.recorder
}

// CheckAccess mocks base method.
func (m *MockMatrix) CheckAccess(ctx context.Context, uid, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", ctx, uid, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockMatrixMockRecorder) CheckAccess(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockMatrix)(nil).CheckAccess), ctx, uid, sid)
}

// CreateMatrix mocks base method.
func (m *MockMatrix) CreateMatrix(ctx context.Context, uid, sid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatrix", ctx, uid, sid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatrix indicates an expected call of CreateMatrix.
func (mr *MockMatrixMockRecorder) CreateMatrix(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatrix", reflect.TypeOf((*MockMatrix)(nil).CreateMatrix), ctx, uid, sid)
}

// DeactivateStatuses mocks base method.
func (m *MockMatrix) DeactivateStatuses(ctx context.Context, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateStatuses", ctx, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateStatuses indicates an expected call of DeactivateStatuses.
func (mr *MockMatrixMockRecorder) DeactivateStatuses(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateStatuses", reflect.TypeOf((*MockMatrix)(nil).DeactivateStatuses), ctx, sid)
}

// DeleteDependencies mocks base method.
func (m *MockMatrix) DeleteDependencies(ctx context.Context, sid, mainUid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDependencies", ctx, sid, mainUid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDependencies indicates an expected call of DeleteDependencies.
func (mr *MockMatrixMockRecorder) DeleteDependencies(ctx, sid, mainUid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDependencies", reflect.TypeOf((*MockMatrix)(nil).DeleteDependencies), ctx, sid, mainUid)
}

// DeleteMatrix mocks base method.
func (m *MockMatrix) DeleteMatrix(ctx context.Context, uid, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatrix", ctx, uid, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatrix indicates an expected call of DeleteMatrix.
func (mr *MockMatrixMockRecorder) DeleteMatrix(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatrix", reflect.TypeOf((*MockMatrix)(nil).DeleteMatrix), ctx, uid, sid)
}

// GetExpertsRelateToTask mocks base method.
func (m *MockMatrix) GetExpertsRelateToTask(ctx context.Context, sid int64) ([]entity.ExpertStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpertsRelateToTask", ctx, sid)
	ret0, _ := ret[0].([]entity.ExpertStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpertsRelateToTask indicates an expected call of GetExpertsRelateToTask.
func (mr *MockMatrixMockRecorder) GetExpertsRelateToTask(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpertsRelateToTask", reflect.TypeOf((*MockMatrix)(nil).GetExpertsRelateToTask), ctx, sid)
}

// GetMID mocks base method.
func (m *MockMatrix) GetMID(ctx context.Context, uid, sid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMID", ctx, uid, sid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMID indicates an expected call of GetMID.
func (mr *MockMatrixMockRecorder) GetMID(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMID", reflect.TypeOf((*MockMatrix)(nil).GetMID), ctx, uid, sid)
}

// GetMatricesRelateToTask mocks base method.
func (m *MockMatrix) GetMatricesRelateToTask(ctx context.Context, sid int64) ([]entity.MatrixModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatricesRelateToTask", ctx, sid)
	ret0, _ := ret[0].([]entity.MatrixModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatricesRelateToTask indicates an expected call of GetMatricesRelateToTask.
func (mr *MockMatrixMockRecorder) GetMatricesRelateToTask(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatricesRelateToTask", reflect.TypeOf((*MockMatrix)(nil).GetMatricesRelateToTask), ctx, sid)
}

// GetMatrix mocks base method.
func (m *MockMatrix) GetMatrix(ctx context.Context, mid int64) (*matrix.Matrix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatrix", ctx, mid)
	ret0, _ := ret[0].(*matrix.Matrix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatrix indicates an expected call of GetMatrix.
func (mr *MockMatrixMockRecorder) GetMatrix(ctx, mid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatrix", reflect.TypeOf((*MockMatrix)(nil).GetMatrix), ctx, mid)
}

// NullifyMatrices mocks base method.
func (m *MockMatrix) NullifyMatrices(ctx context.Context, sid int64, alts, criteria int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NullifyMatrices", ctx, sid, alts, criteria)
	ret0, _ := ret[0].(error)
	return ret0
}

// NullifyMatrices indicates an expected call of NullifyMatrices.
func (mr *MockMatrixMockRecorder) NullifyMatrices(ctx, sid, alts, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NullifyMatrices", reflect.TypeOf((*MockMatrix)(nil).NullifyMatrices), ctx, sid, alts, criteria)
}

// SetStatusComplete mocks base method.
func (m *MockMatrix) SetStatusComplete(ctx context.Context, mid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusComplete", ctx, mid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusComplete indicates an expected call of SetStatusComplete.
func (mr *MockMatrixMockRecorder) SetStatusComplete(ctx, mid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusComplete", reflect.TypeOf((*MockMatrix)(nil).SetStatusComplete), ctx, mid)
}

// UpdateMatrix mocks base method.
func (m *MockMatrix) UpdateMatrix(ctx context.Context, mid, ord int64, rating []eval.Rating) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatrix", ctx, mid, ord, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatrix indicates an expected call of UpdateMatrix.
func (mr *MockMatrixMockRecorder) UpdateMatrix(ctx, mid, ord, rating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatrix", reflect.TypeOf((*MockMatrix)(nil).UpdateMatrix), ctx, mid, ord, rating)
}

// MockFinal is a mock of Final interface.
type MockFinal struct {
	ctrl     *gomock.Controller
	recorder *MockFinalMockRecorder
}

// MockFinalMockRecorder is the mock recorder for MockFinal.
type MockFinalMockRecorder struct {
	mock *MockFinal
}

// NewMockFinal creates a new mock instance.
func NewMockFinal(ctrl *gomock.Controller) *MockFinal {
	mock := &MockFinal{ctrl: ctrl}
	mock.recorder = &MockFinalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinal) EXPECT() *MockFinalMockRecorder {
	return m.recorder
}

// GetFinal mocks base method.
func (m *MockFinal) GetFinal(ctx context.Context, sid int64) (*entity.FinalModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinal", ctx, sid)
	ret0, _ := ret[0].(*entity.FinalModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinal indicates an expected call of GetFinal.
func (mr *MockFinalMockRecorder) GetFinal(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinal", reflect.TypeOf((*MockFinal)(nil).GetFinal), ctx, sid)
}

// SetFinal mocks base method.
func (m *MockFinal) SetFinal(ctx context.Context, final *entity.FinalModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinal", ctx, final)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinal indicates an expected call of SetFinal.
func (mr *MockFinalMockRecorder) SetFinal(ctx, final any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinal", reflect.TypeOf((*MockFinal)(nil).SetFinal), ctx, final)
}

// UpdateFinal mocks base method.
func (m *MockFinal) UpdateFinal(ctx context.Context, final *entity.FinalModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFinal", ctx, final)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFinal indicates an expected call of UpdateFinal.
func (mr *MockFinalMockRecorder) UpdateFinal(ctx, final any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFinal", reflect.TypeOf((*MockFinal)(nil).UpdateFinal), ctx, final)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockConnection) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockConnectionMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockConnection)(nil).ExecContext), varargs...)
}

// GetContext mocks base method.
func (m *MockConnection) GetContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockConnectionMockRecorder) GetContext(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockConnection)(nil).GetContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockConnection) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockConnectionMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockConnection)(nil).QueryContext), varargs...)
}

// QueryRowxContext mocks base method.
func (m *MockConnection) QueryRowxContext(ctx context.Context, query string, args ...any) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockConnectionMockRecorder) QueryRowxContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockConnection)(nil).QueryRowxContext), varargs...)
}

// QueryxContext mocks base method.
func (m *MockConnection) QueryxContext(ctx context.Context, query string, args ...any) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryxContext indicates an expected call of QueryxContext.
func (mr *MockConnectionMockRecorder) QueryxContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryxContext", reflect.TypeOf((*MockConnection)(nil).QueryxContext), varargs...)
}

// SelectContext mocks base method.
func (m *MockConnection) SelectContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockConnectionMockRecorder) SelectContext(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockConnection)(nil).SelectContext), varargs...)
}

// MockIConnectionFactory is a mock of IConnectionFactory interface.
type MockIConnectionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionFactoryMockRecorder
}

// MockIConnectionFactoryMockRecorder is the mock recorder for MockIConnectionFactory.
type MockIConnectionFactoryMockRecorder struct {
	mock *MockIConnectionFactory
}

// NewMockIConnectionFactory creates a new mock instance.
func NewMockIConnectionFactory(ctrl *gomock.Controller) *MockIConnectionFactory {
	mock := &MockIConnectionFactory{ctrl: ctrl}
	mock.recorder = &MockIConnectionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectionFactory) EXPECT() *MockIConnectionFactoryMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockIConnectionFactory) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockIConnectionFactoryMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockIConnectionFactory)(nil).CloseConnection))
}

// Commit mocks base method.
func (m *MockIConnectionFactory) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockIConnectionFactoryMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockIConnectionFactory)(nil).Commit))
}

// GetConnection mocks base method.
func (m *MockIConnectionFactory) GetConnection() repository.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(repository.Connection)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockIConnectionFactoryMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockIConnectionFactory)(nil).GetConnection))
}

// Rollback mocks base method.
func (m *MockIConnectionFactory) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockIConnectionFactoryMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockIConnectionFactory)(nil).Rollback))
}

// StartTransaction mocks base method.
func (m *MockIConnectionFactory) StartTransaction() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockIConnectionFactoryMockRecorder) StartTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockIConnectionFactory)(nil).StartTransaction))
}
