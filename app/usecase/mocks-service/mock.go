// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks-service/mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	configs "webApp/configs"
	entity "webApp/entity"
	eval "webApp/lib/eval"
	usecase "webApp/usecase"

	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method.
func (m *MockUser) CreateNewUser(ctx context.Context, user *entity.UserModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockUserMockRecorder) CreateNewUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUser)(nil).CreateNewUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUser) DeleteUser(ctx context.Context, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserMockRecorder) DeleteUser(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUser)(nil).DeleteUser), ctx, uid)
}

// GetUID mocks base method.
func (m *MockUser) GetUID(ctx context.Context, user *entity.UserModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUID", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUID indicates an expected call of GetUID.
func (mr *MockUserMockRecorder) GetUID(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockUser)(nil).GetUID), ctx, user)
}

// GetUsersRelateToTask mocks base method.
func (m *MockUser) GetUsersRelateToTask(ctx context.Context, sid int64) ([]entity.Expert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersRelateToTask", ctx, sid)
	ret0, _ := ret[0].([]entity.Expert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersRelateToTask indicates an expected call of GetUsersRelateToTask.
func (mr *MockUserMockRecorder) GetUsersRelateToTask(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersRelateToTask", reflect.TypeOf((*MockUser)(nil).GetUsersRelateToTask), ctx, sid)
}

// UpdateUser mocks base method.
func (m *MockUser) UpdateUser(ctx context.Context, uid int64, update *entity.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, uid, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserMockRecorder) UpdateUser(ctx, uid, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUser)(nil).UpdateUser), ctx, uid, update)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockSession) GenerateToken(ctx context.Context, uid int64, cfg *configs.AppConfig) (entity.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, uid, cfg)
	ret0, _ := ret[0].(entity.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockSessionMockRecorder) GenerateToken(ctx, uid, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockSession)(nil).GenerateToken), ctx, uid, cfg)
}

// RefreshToken mocks base method.
func (m *MockSession) RefreshToken(ctx context.Context, refresh string, cfg *configs.AppConfig) (entity.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refresh, cfg)
	ret0, _ := ret[0].(entity.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockSessionMockRecorder) RefreshToken(ctx, refresh, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockSession)(nil).RefreshToken), ctx, refresh, cfg)
}

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// CheckAccess mocks base method.
func (m *MockTask) CheckAccess(ctx context.Context, uid, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", ctx, uid, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockTaskMockRecorder) CheckAccess(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockTask)(nil).CheckAccess), ctx, uid, sid)
}

// ConnectToTask mocks base method.
func (m *MockTask) ConnectToTask(ctx context.Context, sid int64, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToTask", ctx, sid, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToTask indicates an expected call of ConnectToTask.
func (mr *MockTaskMockRecorder) ConnectToTask(ctx, sid, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToTask", reflect.TypeOf((*MockTask)(nil).ConnectToTask), ctx, sid, password)
}

// CreateNewTask mocks base method.
func (m *MockTask) CreateNewTask(ctx context.Context, task *entity.TaskModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTask", ctx, task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewTask indicates an expected call of CreateNewTask.
func (mr *MockTaskMockRecorder) CreateNewTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTask", reflect.TypeOf((*MockTask)(nil).CreateNewTask), ctx, task)
}

// DeleteTask mocks base method.
func (m *MockTask) DeleteTask(ctx context.Context, uid, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, uid, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskMockRecorder) DeleteTask(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTask)(nil).DeleteTask), ctx, uid, sid)
}

// GetAllSolutions mocks base method.
func (m *MockTask) GetAllSolutions(ctx context.Context, uid int64) ([]entity.TaskShortCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSolutions", ctx, uid)
	ret0, _ := ret[0].([]entity.TaskShortCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSolutions indicates an expected call of GetAllSolutions.
func (mr *MockTaskMockRecorder) GetAllSolutions(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSolutions", reflect.TypeOf((*MockTask)(nil).GetAllSolutions), ctx, uid)
}

// GetAlts mocks base method.
func (m *MockTask) GetAlts(ctx context.Context, sid int64) (entity.Alts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlts", ctx, sid)
	ret0, _ := ret[0].(entity.Alts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlts indicates an expected call of GetAlts.
func (mr *MockTaskMockRecorder) GetAlts(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlts", reflect.TypeOf((*MockTask)(nil).GetAlts), ctx, sid)
}

// GetCriteria mocks base method.
func (m *MockTask) GetCriteria(ctx context.Context, sid int64) (entity.Criteria, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCriteria", ctx, sid)
	ret0, _ := ret[0].(entity.Criteria)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCriteria indicates an expected call of GetCriteria.
func (mr *MockTaskMockRecorder) GetCriteria(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCriteria", reflect.TypeOf((*MockTask)(nil).GetCriteria), ctx, sid)
}

// GetTask mocks base method.
func (m *MockTask) GetTask(ctx context.Context, sid int64) (*entity.TaskModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, sid)
	ret0, _ := ret[0].(*entity.TaskModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskMockRecorder) GetTask(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTask)(nil).GetTask), ctx, sid)
}

// SetAlts mocks base method.
func (m *MockTask) SetAlts(ctx context.Context, sid int64, alts entity.Alts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAlts", ctx, sid, alts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAlts indicates an expected call of SetAlts.
func (mr *MockTaskMockRecorder) SetAlts(ctx, sid, alts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlts", reflect.TypeOf((*MockTask)(nil).SetAlts), ctx, sid, alts)
}

// SetCriteria mocks base method.
func (m *MockTask) SetCriteria(ctx context.Context, sid int64, criteria entity.Criteria) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCriteria", ctx, sid, criteria)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCriteria indicates an expected call of SetCriteria.
func (mr *MockTaskMockRecorder) SetCriteria(ctx, sid, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCriteria", reflect.TypeOf((*MockTask)(nil).SetCriteria), ctx, sid, criteria)
}

// SetExpertsWeights mocks base method.
func (m *MockTask) SetExpertsWeights(ctx context.Context, sid int64, weights entity.Weights) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpertsWeights", ctx, sid, weights)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpertsWeights indicates an expected call of SetExpertsWeights.
func (mr *MockTaskMockRecorder) SetExpertsWeights(ctx, sid, weights any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpertsWeights", reflect.TypeOf((*MockTask)(nil).SetExpertsWeights), ctx, sid, weights)
}

// SetPassword mocks base method.
func (m *MockTask) SetPassword(ctx context.Context, sid int64, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", ctx, sid, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockTaskMockRecorder) SetPassword(ctx, sid, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockTask)(nil).SetPassword), ctx, sid, password)
}

// UpdateAlts mocks base method.
func (m *MockTask) UpdateAlts(ctx context.Context, sid int64, alts entity.Alts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlts", ctx, sid, alts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlts indicates an expected call of UpdateAlts.
func (mr *MockTaskMockRecorder) UpdateAlts(ctx, sid, alts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlts", reflect.TypeOf((*MockTask)(nil).UpdateAlts), ctx, sid, alts)
}

// UpdateCriteria mocks base method.
func (m *MockTask) UpdateCriteria(ctx context.Context, sid int64, criteria entity.Criteria) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCriteria", ctx, sid, criteria)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCriteria indicates an expected call of UpdateCriteria.
func (mr *MockTaskMockRecorder) UpdateCriteria(ctx, sid, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCriteria", reflect.TypeOf((*MockTask)(nil).UpdateCriteria), ctx, sid, criteria)
}

// UpdateTask mocks base method.
func (m *MockTask) UpdateTask(ctx context.Context, sid int64, input *entity.TaskModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, sid, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskMockRecorder) UpdateTask(ctx, sid, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTask)(nil).UpdateTask), ctx, sid, input)
}

// ValidateUser mocks base method.
func (m *MockTask) ValidateUser(ctx context.Context, uid, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", ctx, uid, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockTaskMockRecorder) ValidateUser(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockTask)(nil).ValidateUser), ctx, uid, sid)
}

// MockMatrix is a mock of Matrix interface.
type MockMatrix struct {
	ctrl     *gomock.Controller
	recorder *MockMatrixMockRecorder
}

// MockMatrixMockRecorder is the mock recorder for MockMatrix.
type MockMatrixMockRecorder struct {
	mock *MockMatrix
}

// NewMockMatrix creates a new mock instance.
func NewMockMatrix(ctrl *gomock.Controller) *MockMatrix {
	mock := &MockMatrix{ctrl: ctrl}
	mock.recorder = &MockMatrixMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatrix) EXPECT() *MockMatrixMockRecorder {
	return m.recorder
}

// CreateMatrix mocks base method.
func (m *MockMatrix) CreateMatrix(ctx context.Context, uid, sid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatrix", ctx, uid, sid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatrix indicates an expected call of CreateMatrix.
func (mr *MockMatrixMockRecorder) CreateMatrix(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatrix", reflect.TypeOf((*MockMatrix)(nil).CreateMatrix), ctx, uid, sid)
}

// DeactivateStatuses mocks base method.
func (m *MockMatrix) DeactivateStatuses(ctx context.Context, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateStatuses", ctx, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateStatuses indicates an expected call of DeactivateStatuses.
func (mr *MockMatrixMockRecorder) DeactivateStatuses(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateStatuses", reflect.TypeOf((*MockMatrix)(nil).DeactivateStatuses), ctx, sid)
}

// GetExpertsRelateToTask mocks base method.
func (m *MockMatrix) GetExpertsRelateToTask(ctx context.Context, sid int64) ([]entity.ExpertStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpertsRelateToTask", ctx, sid)
	ret0, _ := ret[0].([]entity.ExpertStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpertsRelateToTask indicates an expected call of GetExpertsRelateToTask.
func (mr *MockMatrixMockRecorder) GetExpertsRelateToTask(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpertsRelateToTask", reflect.TypeOf((*MockMatrix)(nil).GetExpertsRelateToTask), ctx, sid)
}

// GetMID mocks base method.
func (m *MockMatrix) GetMID(ctx context.Context, uid, sid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMID", ctx, uid, sid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMID indicates an expected call of GetMID.
func (mr *MockMatrixMockRecorder) GetMID(ctx, uid, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMID", reflect.TypeOf((*MockMatrix)(nil).GetMID), ctx, uid, sid)
}

// GetRatings mocks base method.
func (m *MockMatrix) GetRatings(ctx context.Context, uid, sid, ord int64) ([]eval.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatings", ctx, uid, sid, ord)
	ret0, _ := ret[0].([]eval.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatings indicates an expected call of GetRatings.
func (mr *MockMatrixMockRecorder) GetRatings(ctx, uid, sid, ord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatings", reflect.TypeOf((*MockMatrix)(nil).GetRatings), ctx, uid, sid, ord)
}

// IsAllStatusesComplete mocks base method.
func (m *MockMatrix) IsAllStatusesComplete(ctx context.Context, sid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllStatusesComplete", ctx, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAllStatusesComplete indicates an expected call of IsAllStatusesComplete.
func (mr *MockMatrixMockRecorder) IsAllStatusesComplete(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllStatusesComplete", reflect.TypeOf((*MockMatrix)(nil).IsAllStatusesComplete), ctx, sid)
}

// SetStatusComplete mocks base method.
func (m *MockMatrix) SetStatusComplete(ctx context.Context, mid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusComplete", ctx, mid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusComplete indicates an expected call of SetStatusComplete.
func (mr *MockMatrixMockRecorder) SetStatusComplete(ctx, mid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusComplete", reflect.TypeOf((*MockMatrix)(nil).SetStatusComplete), ctx, mid)
}

// UpdateMatrix mocks base method.
func (m *MockMatrix) UpdateMatrix(ctx context.Context, sid, mid, ord int64, rating []eval.Rating) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatrix", ctx, sid, mid, ord, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatrix indicates an expected call of UpdateMatrix.
func (mr *MockMatrixMockRecorder) UpdateMatrix(ctx, sid, mid, ord, rating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatrix", reflect.TypeOf((*MockMatrix)(nil).UpdateMatrix), ctx, sid, mid, ord, rating)
}

// MockFinal is a mock of Final interface.
type MockFinal struct {
	ctrl     *gomock.Controller
	recorder *MockFinalMockRecorder
}

// MockFinalMockRecorder is the mock recorder for MockFinal.
type MockFinalMockRecorder struct {
	mock *MockFinal
}

// NewMockFinal creates a new mock instance.
func NewMockFinal(ctrl *gomock.Controller) *MockFinal {
	mock := &MockFinal{ctrl: ctrl}
	mock.recorder = &MockFinalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinal) EXPECT() *MockFinalMockRecorder {
	return m.recorder
}

// GetFinal mocks base method.
func (m *MockFinal) GetFinal(ctx context.Context, sid int64) (*entity.FinalModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinal", ctx, sid)
	ret0, _ := ret[0].(*entity.FinalModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinal indicates an expected call of GetFinal.
func (mr *MockFinalMockRecorder) GetFinal(ctx, sid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinal", reflect.TypeOf((*MockFinal)(nil).GetFinal), ctx, sid)
}

// PresentFinal mocks base method.
func (m *MockFinal) PresentFinal(ctx context.Context, sid int64, threshold float64) (*entity.FinalModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentFinal", ctx, sid, threshold)
	ret0, _ := ret[0].(*entity.FinalModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentFinal indicates an expected call of PresentFinal.
func (mr *MockFinalMockRecorder) PresentFinal(ctx, sid, threshold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentFinal", reflect.TypeOf((*MockFinal)(nil).PresentFinal), ctx, sid, threshold)
}

// MockDiService is a mock of DiService interface.
type MockDiService struct {
	ctrl     *gomock.Controller
	recorder *MockDiServiceMockRecorder
}

// MockDiServiceMockRecorder is the mock recorder for MockDiService.
type MockDiServiceMockRecorder struct {
	mock *MockDiService
}

// NewMockDiService creates a new mock instance.
func NewMockDiService(ctrl *gomock.Controller) *MockDiService {
	mock := &MockDiService{ctrl: ctrl}
	mock.recorder = &MockDiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiService) EXPECT() *MockDiServiceMockRecorder {
	return m.recorder
}

// GetInstanceService mocks base method.
func (m *MockDiService) GetInstanceService() *usecase.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceService")
	ret0, _ := ret[0].(*usecase.Service)
	return ret0
}

// GetInstanceService indicates an expected call of GetInstanceService.
func (mr *MockDiServiceMockRecorder) GetInstanceService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceService", reflect.TypeOf((*MockDiService)(nil).GetInstanceService))
}
